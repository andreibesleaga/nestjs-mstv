version: '3.8'
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: dev
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dev" ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: pnpm start:dev
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: postgresql://dev:dev@db:5432/dev
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: ${JWT_SECRET:-development-secret-change-in-production}
      NODE_ENV: development
      IN_DOCKER: 'true'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  db-data:

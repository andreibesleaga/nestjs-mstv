import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { Queue, Worker, Job } from 'bullmq';
import { Redis } from 'ioredis';

export interface EmailJobData {
  to: string;
  subject: string;
  body: string;
}

@Injectable()
export class BullMQService implements OnModuleInit {
  private readonly logger = new Logger(BullMQService.name);
  private redis: Redis;
  private emailQueue: Queue;
  private emailWorker: Worker;

  constructor() {
    if (process.env.NODE_ENV === 'test') {
      this.logger.warn('BullMQ disabled in test environment');
      return;
    }

    try {
      this.redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');
      this.emailQueue = new Queue('email', {
        connection: this.redis,
      });
    } catch (error) {
      this.logger.error('Failed to initialize BullMQ:', error.message);
    }
  }

  async onModuleInit() {
    if (process.env.NODE_ENV === 'test' || !this.redis) {
      return;
    }

    try {
      // Create worker to process email jobs
      this.emailWorker = new Worker(
        'email',
        async (job: Job<EmailJobData>) => {
          this.logger.log(
            `Processing email job ${job.id} for recipient: ${job.data.to.replace(/(.{3}).*@/, '$1***@')}`
          );

          // Simulate email sending
          await this.sendEmail(job.data);

          this.logger.log(`Email job ${job.id} completed`);
        },
        {
          connection: this.redis,
        }
      );

      this.emailWorker.on('completed', (job) => {
        this.logger.log(`Email job ${job.id} has completed`);
      });

      this.emailWorker.on('failed', (job, err) => {
        this.logger.error(`Email job ${job?.id} has failed with error:`, err.message);
      });
    } catch (error) {
      this.logger.error('Failed to initialize BullMQ worker:', error.message);
    }
  }

  async addEmailJob(emailData: EmailJobData, delay?: number) {
    if (!this.emailQueue) {
      this.logger.warn('Email queue not available - email job skipped');
      return null;
    }
    return this.emailQueue.add('send-email', emailData, {
      delay,
      removeOnComplete: 100,
      removeOnFail: 50,
    });
  }

  private async sendEmail(data: EmailJobData) {
    // Simulate email sending delay
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // Email service integration point - configure with SendGrid, Mailgun, SES, etc.
    this.logger.log(`Email processed: ${data.to.replace(/(.{3}).*@/, '$1***@')} - ${data.subject}`);

    // TODO: Replace with actual email service implementation
    // Example: await this.emailProvider.send(data);
  }

  async getQueueStats() {
    if (!this.emailQueue) {
      return {
        waiting: 0,
        active: 0,
        completed: 0,
        failed: 0,
      };
    }

    const waiting = await this.emailQueue.getWaiting();
    const active = await this.emailQueue.getActive();
    const completed = await this.emailQueue.getCompleted();
    const failed = await this.emailQueue.getFailed();

    return {
      waiting: waiting.length,
      active: active.length,
      completed: completed.length,
      failed: failed.length,
    };
  }
}

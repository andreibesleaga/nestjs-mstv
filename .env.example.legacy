# ===========================================
# LEGACY COMPLETE ENVIRONMENT CONFIGURATION
# ===========================================
# This file contains the complete set of environment variables
# for ALL implemented features in the NestJS microservice template.
# 
# ⚠️  WARNING: This is NOT the main configuration file
# 
# USE THIS FILE WHEN:
# - You need to enable advanced protocols (MQTT, NATS, RabbitMQ, gRPC)
# - You want comprehensive observability (Jaeger, Consul, OpenTelemetry)
# - You need advanced microservice patterns
# 
# FOR NORMAL USE:
# - Copy .env.example instead (simplified configuration)
# - Enable features as needed from this reference
# 
# ===========================================

# Database Configuration
DATABASE_TYPE=postgresql
DATABASE_URL=postgresql://dev:dev@localhost:5432/dev
MONGODB_URL=mongodb://dev:dev@localhost:27017/nestjs-app
# For MySQL/MariaDB, set DATABASE_TYPE=mysql or mariadb and provide MYSQL_URL
# DATABASE_TYPE=mysql
# MYSQL_URL=mysql://dev:dev@localhost:3306/dev

# Redis
REDIS_URL=redis://localhost:6379

# JWT
JWT_SECRET=changeme
ACCESS_TOKEN_EXP=15m
REFRESH_TOKEN_EXP=7d

# Kafka
KAFKA_BROKERS=localhost:9092

# Email/SMTP Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_FROM=your-email@gmail.com

# Application
APP_URL=http://localhost:3000

# Microservice Configuration
SERVICE_NAME=nestjs-api
SERVICE_VERSION=1.0.0
SERVICE_HOST=localhost
PORT=3000

# Service Discovery
CONSUL_HOST=localhost
CONSUL_PORT=8500

# Distributed Tracing
JAEGER_ENDPOINT=http://localhost:14268/api/traces

# Security
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=60000
BODY_LIMIT=1048576

# Environment
NODE_ENV=development
LOG_LEVEL=info
API_BASE_URL=https://api.yourdomain.com

# Feature Flags - Protocols
ENABLE_WEBSOCKET=true
ENABLE_MQTT=false
ENABLE_HTTPS=true
ENABLE_GRPC=false

# Microservice Transports
ENABLE_TCP_MICROSERVICE=false
ENABLE_REDIS_MICROSERVICE=true
ENABLE_NATS_MICROSERVICE=false
ENABLE_RABBITMQ_MICROSERVICE=false
ENABLE_KAFKA=true
ENABLE_BULLMQ=true
ENABLE_STREAMING=true

# Feature Flags - Services
ENABLE_JAEGER_TRACING=false
ENABLE_REDIS_CACHE=true
ENABLE_CONSUL_DISCOVERY=false
ENABLE_CIRCUIT_BREAKER=false
CB_THRESHOLD=5
CB_TIMEOUT=10000
CB_RESET_TIMEOUT=60000
ENABLE_PERFORMANCE_MONITORING=false
ENABLE_EMAIL_SERVICE=true

# Storage (disabled by default)
ENABLE_STORAGE=false
STORAGE_PROVIDER=none # aws | azure | gcp | none

# AWS S3
S3_BUCKET=
S3_REGION=us-east-1
S3_ACCESS_KEY_ID=
S3_SECRET_ACCESS_KEY=
# optional for S3-compatible (e.g. MinIO)
S3_ENDPOINT=
S3_FORCE_PATH_STYLE=false

# Azure Blob Storage
AZURE_BLOB_CONTAINER=
AZURE_STORAGE_CONNECTION_STRING=
# or account/key instead of connection string
AZURE_STORAGE_ACCOUNT=
AZURE_STORAGE_ACCOUNT_KEY=

# Google Cloud Storage
GCP_PROJECT_ID=
GCS_BUCKET=
GOOGLE_APPLICATION_CREDENTIALS=
GCP_APPLICATION_CREDENTIALS=

# Protocol Configuration
# HTTPS
SSL_CERT_PATH=/path/to/cert.pem
SSL_KEY_PATH=/path/to/key.pem

# MQTT
MQTT_BROKER_URL=mqtt://localhost:1883
MQTT_USERNAME=
MQTT_PASSWORD=

# WebSocket
WS_PORT=3001

# gRPC
GRPC_PORT=5000
GRPC_PACKAGE=nestjs
GRPC_PROTO_PATH=./src/protocols/grpc/proto/user.proto
GRPC_HOST=localhost
GRPC_MAX_SEND_MESSAGE_LENGTH=4194304
GRPC_MAX_RECEIVE_MESSAGE_LENGTH=4194304
GRPC_RETRY_ATTEMPTS=5
GRPC_RETRY_DELAY=3000
GRPC_TIMEOUT=5000

# TCP Microservice
TCP_HOST=localhost
TCP_PORT=3001
TCP_RETRY_ATTEMPTS=5
TCP_RETRY_DELAY=3000
TCP_TIMEOUT=5000

# NATS
NATS_SERVERS=nats://localhost:4222
NATS_USER=
NATS_PASS=
NATS_TOKEN=
NATS_RETRY_ATTEMPTS=5
NATS_RETRY_DELAY=3000
NATS_TIMEOUT=5000

# RabbitMQ/AMQP
RABBITMQ_URL=amqp://localhost:5672
RABBITMQ_QUEUE=nestjs_queue
RABBITMQ_DURABLE=true
RABBITMQ_EXCLUSIVE=false
RABBITMQ_AUTO_DELETE=false
RABBITMQ_HEARTBEAT=60
RABBITMQ_RECONNECT=5
RABBITMQ_RETRY_ATTEMPTS=5
RABBITMQ_RETRY_DELAY=3000
RABBITMQ_TIMEOUT=5000

# Kafka Configuration
KAFKA_CLIENT_ID=nestjs-microservice
KAFKA_GROUP_ID=nestjs-group
KAFKA_TIMEOUT=5000

# BullMQ Configuration
BULLMQ_REMOVE_ON_COMPLETE=10
BULLMQ_REMOVE_ON_FAIL=5
BULLMQ_ATTEMPTS=3
BULLMQ_BACKOFF_DELAY=2000

# Streaming Configuration
STREAMING_CHANNELS=user-events,system-metrics,audit-logs,notifications,real-time-data
STREAMING_BUFFER_SIZE=1000
STREAMING_TIMEOUT=30000

# Scheduler/Cron Configuration
ENABLE_HEALTH_CHECK_CRON=true
HEALTH_CHECK_CRON=*/30 * * * *
ENABLE_METRICS_COLLECTION_CRON=false
METRICS_COLLECTION_CRON=*/5 * * * *
ENABLE_CLEANUP_CRON=false
CLEANUP_CRON=0 2 * * *
ENABLE_DATA_SYNC_CRON=false
DATA_SYNC_CRON=0 */6 * * *
ENABLE_BACKUP_CRON=false
BACKUP_CRON=0 1 * * *

# Retry Configuration
ENABLE_RETRY=true
RETRY_ATTEMPTS=3
RETRY_DELAY=1000
RETRY_MAX_DELAY=10000
RETRY_EXPONENTIAL_BACKOFF=true

# Health Check Configuration
ENABLE_HEALTH_CHECK=true
HEALTH_CHECK_INTERVAL=30000
HEALTH_CHECK_TIMEOUT=5000
HEALTH_CHECK_RETRIES=3

# Monitoring Configuration
ENABLE_MONITORING=true
METRICS_INTERVAL=60000
ENABLE_TRACING=false
ENABLE_PROFILING=false
ENABLE_EXTERNAL_METRICS=false

# Default Timeouts
DEFAULT_TIMEOUT=5000
REDIS_TIMEOUT=5000

# Database Configuration

# Database Pooling - MongoDB (optional)
# Default driver values are usually fine; uncomment to tune
# MONGODB_MAX_POOL_SIZE=100
# MONGODB_MIN_POOL_SIZE=0
# MONGODB_MAX_IDLE_TIME_MS=0
# MONGODB_WAIT_QUEUE_TIMEOUT_MS=0

# Observability / OpenTelemetry
ENABLE_OPENTELEMETRY=false
SERVICE_NAME=nestjs-mstv
OTEL_DEBUG=false

# Traces exporter (OTLP over HTTP)
OTEL_TRACES_EXPORTER=otlp
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
# Optional headers for auth, comma-separated key=value or JSON
# OTEL_EXPORTER_OTLP_HEADERS=api-key=xxx

# Metrics exporter
OTEL_METRICS_EXPORTER=none   # prometheus|otlp|none
ENABLE_PROMETHEUS_METRICS=false
PROMETHEUS_HOST=0.0.0.0
PROMETHEUS_PORT=9464

# SigNoz / Datadog shortcuts (both OTLP-compatible)
ENABLE_SIGNOZ_TRACING=false
SIGNOZ_ENDPOINT=http://localhost:4318/v1/traces

ENABLE_DATADOG_TRACING=false
DATADOG_OTLP_ENDPOINT=http://localhost:4318/v1/traces